#include "header.h"



//	Inizializza un messaggio di tipo BootMessage, ritorna: il puntatore al messaggio creato
//	Parametri-> descrittore di payload del messaggio
BootMessage* init_bootmessage( unsigned char c)
{

	BootMessage *b;
	b = (BootMessage *) malloc( sizeof(BootMessage) );

	b->pay_desc = c ;
	
	if( c == _BOOT_PING )
	{
		b->versione_dominio = version_dom ;
		b->versione_primay = version_serv ;
	}

	if( c == _BOOT_PONG )
	{
		b->versione_dominio = 0 ;
		b->versione_primay = 0 ;
	}

	if( c == _BOOT_LIST)
	{
		b->versione_dominio = 0.0 ;
		b->versione_primay = 0.0 ;
	}

	return b;
}



// crea un messaggio di tipo BootAM, restituisce un messaggio di tipo BootAM
BootAM* create_boot_am()
{
	BootAM *msg;
	msg = (BootAM *) calloc( 1 ,sizeof(BootAM) );
	return msg;
}



//	Inizializza un messaggio di tipo BootAM, ritorna: il puntatore al messaggio creato
//	Parametri-> descrittore di payload del messaggio, i vari campo del tipo di messaggio
BootAM* init_boot_am(unsigned char p , char *nick , int l_nick , char *psw , int l_psw , char *query , int l_query)
{
	BootAM *msg;
	msg = create_boot_am();

	msg->pay_desc = p;

	if(p == _BOOT_EXIT_AM || p ==  _BOOT_ERROR_AM || p == _BOOT_LOGOUT_AM || p == _BOOT_COMMIT_AM)
	{ ; } 
	else
	{
		if(p == _BOOT_LOGIN_AM)
		{
			strncpy(msg->nick , nick , l_nick);
			msg->dim_nick = l_nick;
			strncpy(msg->psw , psw , l_psw);
			msg->dim_psw = l_psw;
		}

		if(p == _BOOT_USE_DB_AM || p ==  _BOOT_SELECT_AM || p == _BOOT_GE_OP_AM)
		{
			strncpy(msg->query , query , l_query);
			msg->dim_query = l_query;
		}

		if(p == _BOOT_CHANGE_PSW_AM)
		{
			strncpy(msg->nick , nick , l_nick );
			msg->dim_nick = l_nick;
			strncpy(msg->psw , psw , l_psw );
			msg->dim_psw = l_psw;
			strncpy(msg->query , query , l_query );
			msg->dim_query = l_query;
		}
	}

	return msg;
}


//	Imposta il timeout sul descrittore della connessione, restituisce: 0 se c'e' un errore, 1 se l'operazione va a buon fine
//	Parametri-> descrittore della connessione, timeout per l'invio in secondi e microsecondi, timeout per la ricezione in secondi e microsecondi,
int set_timeout(int sockd , time_t w_sec , suseconds_t w_usec , time_t r_sec , suseconds_t r_usec)
{

	struct timeval w_tv , r_tv;
	w_tv.tv_sec = w_sec;
	w_tv.tv_usec = w_usec;

	r_tv.tv_sec = r_sec;
	r_tv.tv_usec = r_usec;

	if( setsockopt( sockd , SOL_SOCKET , SO_RCVTIMEO , &w_tv , sizeof(w_tv) ) == -1)
	{
		perror("errore in setsockopt");
		return 0;
	}	

	if( setsockopt( sockd , SOL_SOCKET , SO_RCVTIMEO , &r_tv , sizeof(r_tv) ) == -1)
	{
		perror("errore in setsockopt");
		return 0;
	}	
	
	return 1;
}



//  Crea la connessione, restituisce: 0 se l'operazione ha avuto esito negativo, 1 se l'operazione ha avuto successo
//  Parametri -> ip e porta a cui connettersi
int connessioneClient(char *ipServer , uint16_t port_server)
{
	int			sockfd;
   struct sockaddr_in	servaddr;
  
	if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
    perror("errore in socket");
    exit(1);
  }

  memset((void *)&servaddr, 0, sizeof(servaddr));
  servaddr.sin_family = AF_INET;
  servaddr.sin_port = htons(port_server);
  if (inet_pton(AF_INET, ipServer, &servaddr.sin_addr) <= 0) {
    fprintf(stderr, "errore in inet_pton per %s\n", ipServer);
    exit(1);
  }    

  if (connect(sockfd, (struct sockaddr *) &servaddr, sizeof(servaddr)) < 0) {
    perror("errore in connect");
    return -1;
  }
  
  return sockfd;
}



// Inizializzazione della variabile sockaddr_in
void addr_init(struct sockaddr_in *addr, in_port_t *port, long int ip)  
{
        addr->sin_family=AF_INET;
        addr->sin_port = *port ;
        addr->sin_addr.s_addr=htons(ip);
}



// converto un indirizzo ip in formato stringa in uno in formato u_long (unsigned long)
void get_ip_string( char * string_ip , struct in_addr * ip) 
{
	if (inet_pton(AF_INET, string_ip , ip) <= 0) 
	{
  	fprintf(stderr, "errore in inet_pton per %s", string_ip);
  	exit(1);
  }
}



//comunicazione client-BootServer, ritorna: 0 se c'e' un errore, il descrittore de socket se l'operazione va a buon fine
int connection_serverBoot()
{
	int rc;
	char *stringa_errore;
	int sockfd;
	
	DB *db_conf; // descrittore del DB Conf
	char *path_conf = "LayerDB/DB/Conf" ;

	db_conf = ( DB *) malloc (sizeof(DB) ) ;
	stringa_errore = (char *) calloc (_MAX_STRING_ERROR  , sizeof(char) );
	
	rc = open_db_ro( db_conf , path_conf , stringa_errore);
  if( !rc )
	{
    fprintf(stderr, "%s\n", stringa_errore);
    exit(1);
  }

	char ip_boot[_DIM_IPV4];
	uint16_t port_boot;
	rc = select_boot_server(db_conf , ip_boot ,  &port_boot , "Tai Cho");

	rc = close_db(db_conf, stringa_errore);
  if( !rc ){
    fprintf(stderr, "%s\n", stringa_errore);
    exit(1);
  }
	free(stringa_errore);
	free(db_conf);

	if( ( sockfd = connessioneClient(ip_boot , port_boot) ) > 0 )
	{
		return sockfd;
	}

	return 0;
}



//  Scrive su buffer il contenuto di un file o socket , ritorna null in caso di errore, il buffer in caso di successo
//	Parametri -> descrittore socket, blocco di lettura
char* writeFile_on_buffer(int fd, size_t n)
{
	size_t l_read = 0;
	int offset = 0;
	int count = 0;
	char *buffer;
	buffer = calloc ( 1 , sizeof(char));	

	do
	{
		count += n;
		buffer = realloc( buffer , count * sizeof(char) );
		l_read = readn(fd, &buffer[offset], n);
		offset += n ;
		printf( "l_read --> %d , n = %d \n" , l_read , n);
	}while(l_read == 0 );

	if(n == -1)
		return NULL;
	else
		return buffer;
}



//  Scrive su buffer il contenuto di un file o socket (bloccante solo prima della ricezione), ritorna null in caso di errore, il buffer in caso di 	
//	successo
//	Parametri -> descrittore socket, blocco di lettura
char* writeFile_on_buffer_noblock(int fd, size_t n)
{
	size_t l_read = 0;
	int offset = 0;
	int count = 0;
	char *buffer;
	buffer = calloc ( 1 , sizeof(char));	

	do
	{
		count += n;
		buffer = realloc( buffer , count * sizeof(char) );
		l_read = readn(fd, &buffer[offset], n);
		offset += n ;
		printf( "l_read --> %d , n = %d \n" , l_read , n);
	}while(l_read == 0 );

	if(n == -1)
		return NULL;
	else
		return buffer;
}



/*Scrive su file o socket il contenuto di un buffer. Ritorna 0 in caso di errore, 1 in caso di successo*/
int writeBuffer_on_file(int fd, size_t n , char*buffer)
{
	size_t l_write = 0;
	int offset = 0;
	int count = strlen(buffer)+1;
	int length;

	do
	{
		if(count < n)
		{
			length = count;
		}
		else
		{
			length = n;
		}
		
		l_write = writen(fd, &buffer[offset], length);
		offset += l_write;

		count = count - l_write;

	}while(count > 0);
	
	if(n == -1)
		return 0;
	else
		return 1;
}



//	Funzione di scrittura in stream su socket ritorna: -1 se c'è un errore altrimenti il numero di byte scritti
//	Parametri-> descrittore socket, buffer per la lettura, dimensione blocco scrittura
ssize_t writen(int fd, const void *buf, size_t n)
{
  size_t nleft;
  ssize_t nwritten;
  const char *ptr;

  ptr = buf;
  nleft = n;
  while (nleft > 0) {
    if ((nwritten = write(fd, ptr, nleft)) <= 0) {
       if ((nwritten < 0) && (errno == EINTR)) nwritten = 0; 	    
       else return(-1);	    /* errore */
    }
    nleft -= nwritten;
    ptr += nwritten;  
  }
  return(n-nleft);
}



//	Funzione di lettura in stream su socket ritorna: -1 se c'è un errore altrimenti il numero di byte letti
//	Parametri-> descrittore socket, buffer per la scrittura, dimensione blocco lettura
ssize_t readn(int fd, void *buf, size_t count) 
{
	size_t nleft;
	ssize_t nread;
 
	nleft = count;
	while (nleft > 0) {             /* repeat until no left */
		if ( (nread = read(fd, buf, nleft)) < 0) {
			if (errno == EINTR) {   /* if interrupted by system call */
				continue;           /* repeat the loop */
			} else {
				return(nread);      /* otherwise exit */
			}
		} else if (nread == 0) {    /* EOF */
			break;                  /* break loop here */ 
		}
		nleft -= nread;             /* set left to read */
		buf +=nread;                /* set pointer */
	}
	return (nleft);
}


//	Funzione di lettura che si blocca in attessa solo dei primi dati, ritorna: -1 se c'è un errore altrimenti il numero di byte letti
//	Parametri-> descrittore socket, buffer per la scrittura, dimensione blocco lettura
ssize_t readn_noblock(int fd, void *buf, size_t count) 
{
	size_t nleft;
	ssize_t nread;
 
	nleft = count;
	while (nleft > 0) 
	{             /* repeat until no left */
		if ( (nread = read(fd, buf, nleft)) < 0) 
		{
			if (errno == EINTR) 
			{   /* if interrupted by system call */
				continue;           /* repeat the loop */
			} 	
			else
		 	{
				return(nread);      /* otherwise exit */
		 	}
					
		} 
		else if (nread < nleft) 
		{    /* EOF */				
			break;                  /* break loop here */ 
		}

		nleft -= nread;             /* set left to read */
		buf +=nread;                /* set pointer */

	}

	return (nleft);
}



