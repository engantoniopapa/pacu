

// ----- Payload Descriptor------
#define _BOOT_PING 1 // 0x01 Bootstrap Ping
#define _BOOT_PONG 2 // 0x02 Bootstrap Pong
#define _BOOT_LIST 3 // 0x03 Bootstrap List Primary
#define _BOOT_ERROR 4 // 0x04 Bootstrap Error
#define _BOOT_LOGIN_AM 5 // 0x05 Bootstrap Login Amministrator
#define _BOOT_EXIT_AM 6 // 0x06 Bootstrap Exit Amministrator
#define _BOOT_USE_DB_AM 7 // 0x07 Bootstrap Use DB Amministrator
#define _BOOT_SELECT_AM 8 // 0x08 Bootstrap Select Amministrator
#define _BOOT_GE_OP_AM 9 // 0x09 Bootstrap Generic Operation Amministrator
#define _BOOT_ERROR_AM 10 // 0x10 Bootstrap Error Amministrator
#define _BOOT_CHANGE_PSW_AM 11 // 0x11 Bootstrap Change Password Amministrator
#define _BOOT_LOGOUT_AM 12 // 0x12 Bootstrap Logout Amministrator
#define _BOOT_COMMIT_AM 13 // 0x13 Bootstrap Commit Amministrator

#define _PING_MESS_UDP 25 // 0x25 Ping Message UDP
#define _PONG_MESS_UDP 26 // 0x26 Pong Message UDP

#define _INIT_UPDATE_DOM 30 // 0x25 InitMessage Update Lista Domini
#define _INIT_START_TR 31 // 0x31 InitMessage Start Transaction
#define _INIT_LS 32 // 0x32 InitMessage List 
#define _INIT_CD 33 // 0x33 InitMessage Change Directory
#define _INIT_READ_RESOURCE 34 // 0x34 InitMessage Read Resource
#define _INIT_STATE_TR 35 // 0x25 InitMessage State Transaction

#define _DIAG_ACK 61 // 0x61 DiagnosticMessage Ack
#define _DIAG_REP_CON 62 // 0x62 DiagnosticMessage Repeat Connect
#define _DIAG_ERROR 63 // 0x63 DiagnosticMessage Error
#define _DIAG_STATE_TR 64 // 0x64 DiagnosticMessage State Transaction

#define _IDT_PRIMARY 71 // 0x71 Identity Primary

#define _BULLY_ELECT 91 // 0x91 BullyMessage Election
#define _BULLY_ACK 92 // 0x92 BullyMessage Ack
#define _BULLY_PRIMARY 93 // 093 BullyMessage New Primary

//------- Parametri DiagnosticMessage Error -------
#define _GENERIC_ERROR 0 // Errore generico
#define _BIZANTINE_ERROR 1 // Errore bizantino
#define _NO_DOM_ERROR 2 // Errore il primary non gestisce il dominio
#define _IGNORE_DOM_ERROR 3 // Errore il dominio Ã¨ inesistente

//------- Parametri DiagnosticMessage State Transaction -------
#define _STATE_ABORT 0 // Stato Abort
#define _STATE_COMMIT 1 // Stato Commit
#define _STATE_PRONTA 2 // Stato Transazione Pronta

//------- Parametri pacchetti -------
#define _DIM_NICK_PSW 30 // max lunghezza nickname e password
#define _DIM_QUERY_AM 1000 // max lunghezza query amministratore
#define _DIM_NAME_SERVER 30 // max lunghezza nome server
#define _DIM_RES 1024 // max lunghezza campo path risorsa
#define _DIM_DOM 30 // lunghezza campo nome dominio


char nick_am[_DIM_NICK_PSW]; //  nickname amministratore
int l_nick_am; //  lunghezza nickname amministratore



// struttura dei pacchetti di comunicazione client-BootServer
struct BootMessage
{
	unsigned char pay_desc;
	double versione_dominio;
	double versione_primay;
};
typedef struct BootMessage BootMessage;


//struttura dei pacchetti di comunicazione amministratore-BootServer
struct BootAM
{
	unsigned char pay_desc;
	char nick[_DIM_NICK_PSW];
	int dim_nick;
	char psw[_DIM_NICK_PSW];
	int dim_psw;
	char query[_DIM_QUERY_AM];
	int dim_query;	
};
typedef struct BootAM BootAM;


// struttura identificativa del server 
struct Server
{
	char name[_DIM_NAME_SERVER+1];
	char ip[_DIM_IPV4];
	int port;	
};
typedef struct Server Server;



// struttura identificativa del dominio
struct Dominio
{
	char name[_DIM_DOM+1];
};
typedef struct Dominio Dominio;


// struttura dei pacchetti di comunicazione UDP di ping e pong
struct PPMessage
{
		unsigned char pay_desc;
};
typedef struct PPMessage PPMessage;


// struttura dei pacchetti di comunicazione client-Primary (prima iterazione)
struct InitMessage
{
	unsigned char pay_desc;
	char res[_DIM_RES];
	int l_res;	
	int opt1;
	int opt2;
};
typedef struct InitMessage InitMessage;


// struttura dei pacchetti di comunicazione Diagnostica
struct DiagMessage
{
		unsigned char pay_desc;
		int param_state;
};
typedef struct DiagMessage DiagMessage;


// struttura pacchetto di comunicazione per l'identificazione di un Primary server
struct IDT_PrimaryMessage
{
		unsigned char pay_desc;
		char name[_DIM_NAME_SERVER];
		int l_name;
		char ip[_DIM_IPV4];
		int port;
};
typedef struct IDT_PrimaryMessage IDT_Message;

// struttura pacchetto di comunicazione per il Bully Algorithm
struct BullyMessage
{
		unsigned char pay_desc;
		char dom[_DIM_DOM];
		char server[_DIM_NAME_SERVER];
		int l_server;
};
typedef struct BullyMessage BullyMessage;
