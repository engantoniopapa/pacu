#include <time.h>
#include <stdlib.h>      /* C standard library */
#include <stdio.h>	 /* standard I/O library */
#include <string.h>      /* string functions */
#include <unistd.h>
#include <sys/stat.h>
#include <dirent.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <fcntl.h> 
#include <ctype.h>
#include <netinet/in.h>
#include <netinet/tcp.h>
#include <arpa/inet.h>
#include <errno.h>
#include <math.h>
#include <semaphore.h>
#include <pthread.h>
#include <limits.h>
#include <sys/wait.h>
#include <netdb.h>
#include <sys/ioctl.h>
#include <net/if.h>   

#include "LayerDB/api_db.h"


#define LOG_ABORT 0
#define LOG_PREPARA 1
#define LOG_PRONTO 2
#define LOG_COMMIT 3

#define LOG_QUERY 1024
#define LOG_RES 1024





struct UnitLog
{
	char res1[LOG_RES];
	char res2[LOG_RES];
	short int state;	
};
typedef struct UnitLog UnitLog;

struct TrLog
{
	int id_p;
	int id_c;
	unsigned char type;
	UnitLog* list;
	int length;
	
};
typedef struct TrLog TrLog;


int count_log(DB* data_base , char* string_query , char* string_error)
{	
	int l;
	int rc;
	sqlite3_stmt* result;
 				printf("sdadf--------------- str = %s  --\n" , string_query);

	rc = sqlite3_prepare_v2(data_base->db, string_query, strlen(string_query), &result, NULL);

	if( rc ==	SQLITE_OK)
	{
		if(sqlite3_step(result) == SQLITE_ROW)
		{
			l = sqlite3_column_int(result, 0);
		}
		sqlite3_finalize(result);
	}
	else
	{
		memset(string_error , '\0' , _NW_DIM_ERROR );	
		char *string_temp; 
		string_temp = (char *) malloc((sizeof(char)) * _NW_DIM_ERROR );
		strcpy( string_temp , "Errore nella count: ") ;
		strcat( string_temp , sqlite3_errmsg(data_base->db));
		strncpy(string_error , string_temp , _NW_DIM_ERROR );
		free(string_temp);
		l = -1;
	}
	return l;
}

int callback_select_recTR(void* object_RQ, int argc, char **argv, char **azColName)
{
	ResultQuery *temp_risultato ;
	temp_risultato = (ResultQuery*) object_RQ;
	TrLog *list;
	list = (TrLog *) temp_risultato->object;

	int index = temp_risultato->l_row ;
	
	if(index < temp_risultato->count)
	{
		list[index].id_p = atoi(argv[0]) ;
		list[index].id_c = atoi(argv[1]) ;
		list[index].type = atoi(argv[2]) ;

		++temp_risultato->l_row;
	}
	
  temp_risultato->object = (void *) list ;
	return 0;
}


TrLog *select_recTR(char *path , char *str_tab, char *str_cond , char *str_groupby ,char *stringa_errore , int *len)
{
	TrLog *list_log;
	DB *db_log; // descrittore del DB Log
	int rc;
	db_log = ( DB *) malloc (sizeof(DB) ) ;
		
	rc = open_db_rw( db_log , path , stringa_errore);
	if( !rc )
	{
		fprintf(stderr, "%s\n", stringa_errore);
		free(db_log);
  	*len = -1;
    return NULL ;
	}
	
	char string_query[LOG_QUERY] = {0x0};
	
	snprintf(string_query , LOG_QUERY-1 , " select count(*) from ( select * from %s %s %s)" , str_tab , str_cond , str_groupby);
 	*len = count_log( db_log,  string_query , stringa_errore);

 	if(*len < 0)
 	{
 		free(db_log);
		return NULL;
	}
	
	if(*len == 0)
	{
		return NULL;
	}
	
	list_log = (TrLog *) calloc( *len , sizeof(TrLog) );

	
	memset(string_query , '\0' , LOG_QUERY);
	snprintf(string_query , LOG_QUERY-1 , "select b , c , d  from (select * from %s %s %s)"  ,  str_tab , str_cond , str_groupby);
	
	ResultQuery* objectRQ;
	objectRQ = (ResultQuery*) calloc ( 1 , sizeof(ResultQuery) );
	objectRQ->object = (void*) list_log;
	objectRQ->count = *len;
	objectRQ->l_row = 0;
	
	char *temp_error;
	rc = sqlite3_exec(db_log->db, string_query , callback_select_recTR , (void*)objectRQ , &temp_error);

	if( rc!=SQLITE_OK )
	{
		memset(stringa_errore , '\0' , _NW_DIM_ERROR );	
		
		strcpy( stringa_errore , "SQL error: ") ;
		strncat(stringa_errore , temp_error , _NW_DIM_ERROR - strlen(stringa_errore) );
		*len = -1;
		free(objectRQ);
		free( list_log );
		free(db_log);
		return NULL;
	}
	
	rc = close_db(db_log, stringa_errore);
  if( !rc )
  {
    free(db_log);
    		free(objectRQ);
    free( list_log );
  	*len = -1 ;
    return NULL ;
  }
  
  free(db_log);
  		free(objectRQ);
  return list_log;
}




int main()
{

	TrLog *prova;
	
	char *str_cond = "where d = 1 \0";
	char *str_groupby = "group by b , c \0";
	char stringa_errore[1024] = {0x0};
	int  len = 0;
	
	
	prova = select_recTR("dbprova" , "dbprova", str_cond , str_groupby , stringa_errore , &len);

	
	if( len > 0)
	{
		int i ;
		for(i = 0 ; i < len ; ++i)
		{
			printf( " b = %d , c = %d , d = %d \n " , prova[i].id_p , prova[i].id_c , prova[i].type); 
		}
	}
	else
	{
		printf("NOOOOOO! \n");
	}





}
